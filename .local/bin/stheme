#!/bin/bash

#					stheme (set theme)
# Just a utility to set global themes around all my system (rgb, wallpaper(s), colorschemes, 
# and other programs). I should come up with a better name, the current one is 
# pretty damm boring.
#
# IMPORTANT NOTES:
#  	- This only works with X (yeah, don't plan to support Wayland or any other(for now..))
#  	- To make it persistent just exceute this program whenever you start your 
#  	  X server (e.g in your .xinitrc)
#	- It assigns wallpapers by using same arguments you would use with xwallpaper
#	- Colorsheme is set based on your first argument (i.e first wallpaper) and
#	other arguments are passed to xwallpaper to set wallpapers
#	- OpenRGB server needs to be running as daemon
#
# CURRENT STATE AND FUTURE FEATURES:
#	- Don't plan to add features right now, but when I decide to add features I will 
#	probably add...
#		- Make a TUI for these and a more sophisticated CLI tool (in Rust || C || C++)
#		- Fix error when bad args are passed
#		- Make OpenRGB OPTIONAL so users and opt out/in of it (depending if
#		it tries to sync PyWal and OpenRGB by default or not)
#		- Make it so every dependency here is not a dependency at
#		all (excepy pywal and maybe xwallpaper) so users can opt in or out
#		cool features)
#		
# DEPENDENCIES:
# 
# 	- pywal
# 	- xwallpaper
# 	- openrgb
# 	- swo (sync pywal and openrgb)
# 	- spicetify (for spicewal integration)
# 		- NOT currently supported  (commented)
# 		- https://github.com/samu22cr/spicewal
# 	- pywalfox
# 	- dunst notification server (optional)
#
#
# SYNOPSIS:
#
#	stheme path/to/pywal_image xwallpaper_args...
#	
# USAGE EXAMPLE:
#
#	stheme pywal_image.png --center one_image.png
#
# First argument is image to be used for setting pywal colorscheme,
# and rest of arguments are xwallpaper arguments to configure wallpaper
# with xwallpaper
#
# PENDING: 
# 	- receive argument to get if $1 is dark enough
# 	to saturate pywal behavior so OpenRGB colors are brighter

# not using xwallpaper, cus wayland
# type xwallpaper > /dev/null || {
# 	echo "Need xwallpaper installed to work :'v"
# 	exit 1
# 	}
type wal > /dev/null || {
	echo "Need pywal installed to work :'v"
	exit 1
	}	
type swo > /dev/null || {
	echo "Need swo installed to work :'v"
	exit 1
}


if [[ -z "${XDG_CONFIG_HOME}" ]]; then
  XDG_CONFIG_HOME="$HOME/.config"
fi

if [[ -z "${XDG_STATE_HOME}" ]]; then
  XDG_STATE_HOME="$HOME/.local/state"
fi

stheme_state_dir="$XDG_STATE_HOME/stheme"
stheme_xwallpaper_args="$stheme_state_dir/xwallpaper_args"
stheme_pwd="$stheme_state_dir/stheme_pwd"

[ -z $1 ] && { 
	[ ! -d "$stheme_state_dir" ] && {
		echo "[WARNING]: No wallpaper previously set, creating state dir"
		mkdir $stheme_state_dir
		exit 1;
	}
	[ ! -f "$stheme_xwallpaper_args" ] && {
		echo "[ERROR]: No wallpaper previously set, pls specify args"
		exit 1;
	}
	cd $(cat $stheme_pwd) && echo "[INFO]: Successfully changed directory"
	# not using xwallpaper, cus wayland
	# xwallpaper $(cat $stheme_xwallpaper_args) && echo "[INFO]: Successfully set wallpaper(s)" 
	wal -nR # -n so bg doesnt change and keep bg confed by xwallpaper
	if pgrep -x "openrgb" > /dev/null 
	then
		# running openrgb...
		swo
	fi
	exit 0
}

[ $1 = "-h" ] && {
	echo "Usage: stheme path/to/pywal_image xwallpaper_args... "
	echo "Description: set global theme. Use xwallpaper args for wallpaper configuration"
	exit 0
}

# Parsing arguments and extracting pywal_image
pywal_image=""
for arg do
  shift
  [ -f $arg ] &&  {
	pywal_image=$arg
	# continue
	break;
  } 
  set -- "$@" "$arg"
done
if [[ -z "$pywal_image" ]]; then
	echo "[ERROR]: No pywal image specified"
	exit 1
fi

wal -n -i "$pywal_image"  -o swo &
echo "$@" > $stheme_xwallpaper_args
xwallpaper "$@" && echo "[INFO]: Successfully set wallpaper(s)"
echo $PWD > $stheme_pwd

if pgrep -x "openrgb" > /dev/null 
then
	# running openrgb...
	swo && echo "[INFO]: Successfully synced pywal & openrgb"
fi


type pywalfox > /dev/null && {
	echo "[INFO]: Applying theme to firefox (via pywalfox)" 
	pywalfox update || echo "[ERROR]: Error while theming firefox (via pywalfox)" 
	echo "[INFO]: Successfully themed firefox (via pywalfox)" 
}

type dunst > /dev/null && {
	pgrep -x dunst > /dev/null && {
		parse-dunst-template
		pkill dunst
		dunst &
	}
}

type mako > /dev/null && {
	pgrep -x makw > /dev/null && {
		sync-wal-mako
	}
}

type waybar > /dev/null && {
	killall waybar
	waybar &> /dev/null & disown
}

# type spicetify > /dev/null && {
# 	spicetify apply && {
# 		echo "[INFO]: Successfully re-applied spicetify theme" 
# 		echo "[INFO]: Re-opening spotify client" &
# 		sleep 2 
# 		# ^^^ Above sleep is necessary so spotify-launcher
# 		# actually opens. Why does this happen??? Don't exactly know
# 		# but discovered while trying do debug the fact that spotify
# 		# didn't launch after "spicetify update". It might be some
# 		# internal race condition happening at the spotify client app,
# 		(spotify-launcher 1> /dev/null 2>&1 &) && echo "[INFO]: Successfully opened spotify client" 
# 		exit 0
# 	}
# 	echo "[ERROR]: Couldn't re-apply spicetify theme" 
# 	exit 1
# }
#
